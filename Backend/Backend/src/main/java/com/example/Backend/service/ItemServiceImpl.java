package com.example.Backend.service;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import com.example.Backend.exception.BillingSystemAlreadyExist;
import com.example.Backend.exception.BillingSystemInternalException;
import com.example.Backend.exception.BillingSystemNotFoundException;
import com.example.Backend.model.Item;
import com.example.Backend.repository.ItemRepository;
import java.util.List;
@Service
public class ItemServiceImpl implements ItemService {

    private final ItemRepository itemRepository;

    public ItemServiceImpl(ItemRepository itemRepository) {
        this.itemRepository = itemRepository;
    }
    
    @Override
    public Item addItem(Item item) {
        try {
            // Check if the item with the same name already exists
            if (itemRepository.existsByName(item.getName())) {
                throw new BillingSystemAlreadyExist("Item name already exists");
            }

            // Check if the item with the same HSN code already exists
            if (itemRepository.existsByHsnCode(item.getHsn())) {
                throw new BillingSystemAlreadyExist("HSN Code already exists");
            }

            // Save the item to the database
            int save = itemRepository.save(item); // Save and return the saved item
            if (save == 0) {
                throw new BillingSystemInternalException("Failed to save item due to internal DB error");
            }

            return item; // Return the saved item with its ID (if autogenerated)
        } catch (DataAccessException e) {
            throw new BillingSystemInternalException("Database error while saving item: " + e.getMessage());
        }
    }


    @Override
    public Item updateItem(Item item) {
        try {
            if (!itemRepository.existsById(item.getItemId())) {
                throw new BillingSystemNotFoundException("Item not found for this id: " + item.getItemId());
            }

            int result = itemRepository.update(item);
            if (result == 0) {
                throw new BillingSystemInternalException("Failed to update item due to internal DB error");
            }

            return item;
        } catch (DataAccessException e) {
            throw new BillingSystemInternalException("Database error while updating item: " + e.getMessage());
        }
    }

     @Override
    public Item deleteItem(Item item) {
        try {
            if (!itemRepository.existsById(item.getItemId())) {
                throw new BillingSystemNotFoundException("Item not found for this id: " + item.getItemId());
            }

            int result = itemRepository.delete(item);
            if (result == 0) {
                throw new BillingSystemInternalException("Failed to delete item due to internal DB error");
            }

            return item;
        } catch (DataAccessException e) {
            throw new BillingSystemInternalException("Database error while deleting item: " + e.getMessage());
        }
    }
    
    @Override
    public List<Item> getAllItems() {
        try {
            List<Item> items = itemRepository.findAll();
            if (items.isEmpty()) {
                throw new BillingSystemInternalException("Failed to fetch items due to internal DB error");
            }
            return items;
        } catch (DataAccessException e) {
            throw new BillingSystemInternalException("Database error while fetching items: " + e.getMessage());
        }
    }

   
    
    @Override
    public Item searchItemByName(Item item) {
        try {
            if (item.getName() == null || item.getName().trim().isEmpty()) {
                throw new BillingSystemNotFoundException("Item name must not be empty");
            }

            List<Item> itemList = itemRepository.findByName(item.getName());

            if (itemList.isEmpty()) {
                throw new BillingSystemNotFoundException("No item found with name: " + item.getName());
            }

            return itemList.get(0); // return the first matched item
        } catch (DataAccessException e) {
            throw new BillingSystemInternalException("Database error occurred while searching item: " + e.getMessage());
        }
    }

}
